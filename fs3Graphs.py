# -*- coding: utf-8 -*-
"""
Created on Tue May 31 11:24:02 2018

@author: Andreas Foulk

@descriptions: This file creates plotly graphs
and writes them to a file so that the QWebView
can load them into the gui.
"""

import plotly
import plotly.graph_objs as go
from plotly import tools
import tempfile
import os
import platform
import re

def test():

    if platform.system() == 'Windows':
        polyfillpath = 'file:///'
        plotlypath = 'file:///'
        polyfillpath += os.path.join(os.path.dirname(__file__), 'jsscripts/polyfill.min.js')
        plotlypath += os.path.join(os.path.dirname(__file__), 'jsscripts/plotly-1.34.0.min.js')
    else:
        polyfillpath = os.path.join(os.path.dirname(__file__), 'jsscripts/polyfill.min.js')
        plotlypath = os.path.join(os.path.dirname(__file__), 'jsscripts/plotly-1.34.0.min.js')

    trace1 = go.Bar(
        x=['giraffes', 'orangutans', 'monkeys'],
        y=[20, 14, 23],
        name='SF Zoo'
    )
    trace2 = go.Bar(
        x=['giraffes', 'orangutans', 'monkeys'],
        y=[12, 18, 29],
        name='LA Zoo'
    )

    data = [trace1, trace2]
    layout = go.Layout(
        barmode='group'
    )

    fig = go.Figure(data=data, layout=layout)

    # first lines of additional html with the link to the local javascript
    raw_plot = '<head><meta charset="utf-8" /><script src="{}"></script><script src="{}"></script></head>'.format(polyfillpath, plotlypath)
    # call the plot method without all the javascript code
    raw_plot += plotly.offline.plot(fig, output_type='div', include_plotlyjs=False, show_link=False)
    # insert callback for javascript events
    # raw_plot += js_callback()

    # use regex to replace the string ReplaceTheDiv with the correct plot id generated by plotly
    match = re.search('Plotly.newPlot\("([^"]+)', raw_plot)
    substr = match.group(1)
    raw_plot = raw_plot.replace('ReplaceTheDiv', substr)

    plot_path = os.path.join(tempfile.gettempdir(), 'temp_plot_name.html')
    with open(plot_path, "w") as f:
        f.write(raw_plot)

    print(plot_path)
    return plot_path

    # return "/Users/andreasfoulk/dev/csm/446/unit1/AFmountains.html"

def js_callback():
    '''
    returns a string that is added to the end of the plot. This string is
    necessary for the interaction between plot and map objects
    WARNING! The string ReplaceTheDiv is a default string that will be
    replaced in a second moment
    '''

    js_str = '''
    <script>
    // additional js function to select and click on the data
    // returns the ids of the selected/clicked feature
    var plotly_div = document.getElementById('ReplaceTheDiv')
    var plotly_data = plotly_div.data
    // selecting function
    plotly_div.on('plotly_selected', function(data){
    var dds = {};
    dds["mode"] = 'selection'
    dds["type"] = data.points[0].data.type
    featureIds = [];
    featureIdsTernary = [];
    data.points.forEach(function(pt){
    featureIds.push(parseInt(pt.id))
    featureIdsTernary.push(parseInt(pt.pointNumber))
    dds["id"] = featureIds
    dds["tid"] = featureIdsTernary
        })
    //console.log(dds)
    window.status = JSON.stringify(dds)
    })
    // clicking function
    plotly_div.on('plotly_click', function(data){
    var featureIds = [];
    var dd = {};
    dd["fidd"] = data.points[0].id
    dd["mode"] = 'clicking'
    // loop and create dictionary depending on plot type
    for(var i=0; i < data.points.length; i++){
    // scatter plot
    if(data.points[i].data.type == 'scatter'){
        dd["uid"] = data.points[i].data.uid
        dd["type"] = data.points[i].data.type
        data.points.forEach(function(pt){
        dd["fid"] = pt.id
        })
    }
    // pie
    else if(data.points[i].data.type == 'pie'){
      dd["type"] = data.points[i].data.type
      dd["label"] = data.points[i].label
      dd["field"] = data.points[i].data.name
      console.log(data.points[i].label)
      console.log(data.points[i])
    }
    // histogram
    else if(data.points[i].data.type == 'histogram'){
        dd["type"] = data.points[i].data.type
        dd["uid"] = data.points[i].data.uid
        dd["field"] = data.points[i].data.name
        // correct axis orientation
        if(data.points[i].data.orientation == 'v'){
            dd["id"] = data.points[i].x
            dd["bin_step"] = data.points[i].data.xbins.size
        }
        else {
            dd["id"] = data.points[i].y
            dd["bin_step"] = data.points[i].data.ybins.size
        }
    }
    // box plot
    else if(data.points[i].data.type == 'box'){
        dd["uid"] = data.points[i].data.uid
        dd["type"] = data.points[i].data.type
        dd["field"] = data.points[i].data.customdata
            // correct axis orientation
            if(data.points[i].data.orientation == 'v'){
                dd["id"] = data.points[i].x
            }
            else {
                dd["id"] = data.points[i].y
            }
        }
    // violin plot
    else if(data.points[i].data.type == 'violin'){
        dd["uid"] = data.points[i].data.uid
        dd["type"] = data.points[i].data.type
        dd["field"] = data.points[i].data.customdata
            // correct axis orientation (for violin is viceversa)
            if(data.points[i].data.orientation == 'v'){
                dd["id"] = data.points[i].x
            }
            else {
                dd["id"] = data.points[i].y
            }
        }
    // bar plot
    else if(data.points[i].data.type == 'bar'){
        dd["uid"] = data.points[i].data.uid
        dd["type"] = data.points[i].data.type
        dd["field"] = data.points[i].data.customdata
            // correct axis orientation
            if(data.points[i].data.orientation == 'v'){
                dd["id"] = data.points[i].x
            }
            else {
                dd["id"] = data.points[i].y
            }
        }
    // ternary
    else if(data.points[i].data.type == 'scatterternary'){
        dd["uid"] = data.points[i].data.uid
        dd["type"] = data.points[i].data.type
        dd["field"] = data.points[i].data.customdata
        dd["fid"] = data.points[i].pointNumber
        }
        }
    window.status = JSON.stringify(dd)
    });
    </script>'''

    return js_str
